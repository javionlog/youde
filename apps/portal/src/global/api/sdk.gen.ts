// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from "./client";
import { client } from "./client.gen";
import {
  getAuthListAccountsResponseTransformer,
  postAuthChangePasswordResponseTransformer,
  postAuthGetAccessTokenResponseTransformer,
  postAuthRbacGetUserResourceTreeResponseTransformer,
  postAuthRbacListResourceTreeResponseTransformer,
  postAuthRbacListRoleResourceTreeResponseTransformer,
  postAuthRbacListUserResourceTreeResponseTransformer,
  postAuthRefreshTokenResponseTransformer,
  postAuthSignInEmailResponseTransformer,
  postAuthSignUpEmailResponseTransformer,
  postGuestThingListResponseTransformer,
  postThingCreateResponseTransformer,
  postThingGetResponseTransformer,
  postThingListResponseTransformer,
  postThingUpdateResponseTransformer,
} from "./transformers.gen";
import type {
  GetAuthDeleteUserCallbackData,
  GetAuthDeleteUserCallbackErrors,
  GetAuthDeleteUserCallbackResponses,
  GetAuthErrorData,
  GetAuthErrorErrors,
  GetAuthErrorResponses,
  GetAuthGetSessionData,
  GetAuthGetSessionErrors,
  GetAuthGetSessionResponses,
  GetAuthListAccountsData,
  GetAuthListAccountsErrors,
  GetAuthListAccountsResponses,
  GetAuthListSessionsData,
  GetAuthListSessionsErrors,
  GetAuthListSessionsResponses,
  GetAuthOkData,
  GetAuthOkErrors,
  GetAuthOkResponses,
  GetAuthRbacResourceGetData,
  GetAuthRbacResourceGetErrors,
  GetAuthRbacResourceGetResponses,
  GetAuthRbacResourceLocaleGetData,
  GetAuthRbacResourceLocaleGetErrors,
  GetAuthRbacResourceLocaleGetResponses,
  GetAuthRbacRoleGetData,
  GetAuthRbacRoleGetErrors,
  GetAuthRbacRoleGetResponses,
  GetAuthResetPasswordByTokenData,
  GetAuthResetPasswordByTokenErrors,
  GetAuthResetPasswordByTokenResponses,
  GetAuthVerifyEmailData,
  GetAuthVerifyEmailErrors,
  GetAuthVerifyEmailResponses,
  GetPublicData,
  PostAuthAccountInfoData,
  PostAuthAccountInfoErrors,
  PostAuthAccountInfoResponses,
  PostAuthChangeEmailData,
  PostAuthChangeEmailErrors,
  PostAuthChangeEmailResponses,
  PostAuthChangePasswordData,
  PostAuthChangePasswordErrors,
  PostAuthChangePasswordResponses,
  PostAuthDeleteUserData,
  PostAuthDeleteUserErrors,
  PostAuthDeleteUserResponses,
  PostAuthForgetPasswordData,
  PostAuthForgetPasswordErrors,
  PostAuthForgetPasswordResponses,
  PostAuthGetAccessTokenData,
  PostAuthGetAccessTokenErrors,
  PostAuthGetAccessTokenResponses,
  PostAuthIsUsernameAvailableData,
  PostAuthIsUsernameAvailableErrors,
  PostAuthLinkSocialData,
  PostAuthLinkSocialErrors,
  PostAuthLinkSocialResponses,
  PostAuthRbacGetUserResourceTreeData,
  PostAuthRbacGetUserResourceTreeErrors,
  PostAuthRbacGetUserResourceTreeResponses,
  PostAuthRbacListResourceRolesData,
  PostAuthRbacListResourceRolesErrors,
  PostAuthRbacListResourceRolesResponses,
  PostAuthRbacListResourceTreeData,
  PostAuthRbacListResourceTreeErrors,
  PostAuthRbacListResourceTreeResponses,
  PostAuthRbacListResourceUsersData,
  PostAuthRbacListResourceUsersErrors,
  PostAuthRbacListResourceUsersResponses,
  PostAuthRbacListRoleResourcesData,
  PostAuthRbacListRoleResourcesErrors,
  PostAuthRbacListRoleResourcesResponses,
  PostAuthRbacListRoleResourceTreeData,
  PostAuthRbacListRoleResourceTreeErrors,
  PostAuthRbacListRoleResourceTreeResponses,
  PostAuthRbacListRoleUsersData,
  PostAuthRbacListRoleUsersErrors,
  PostAuthRbacListRoleUsersResponses,
  PostAuthRbacListUserResourcesData,
  PostAuthRbacListUserResourcesErrors,
  PostAuthRbacListUserResourcesResponses,
  PostAuthRbacListUserResourceTreeData,
  PostAuthRbacListUserResourceTreeErrors,
  PostAuthRbacListUserResourceTreeResponses,
  PostAuthRbacListUserRolesData,
  PostAuthRbacListUserRolesErrors,
  PostAuthRbacListUserRolesResponses,
  PostAuthRbacListUserRolesWithGrantData,
  PostAuthRbacListUserRolesWithGrantErrors,
  PostAuthRbacListUserRolesWithGrantResponses,
  PostAuthRbacResourceCreateData,
  PostAuthRbacResourceCreateErrors,
  PostAuthRbacResourceCreateResponses,
  PostAuthRbacResourceDeleteData,
  PostAuthRbacResourceDeleteErrors,
  PostAuthRbacResourceDeleteManyData,
  PostAuthRbacResourceDeleteManyErrors,
  PostAuthRbacResourceDeleteManyResponses,
  PostAuthRbacResourceDeleteResponses,
  PostAuthRbacResourceListData,
  PostAuthRbacResourceListErrors,
  PostAuthRbacResourceListResponses,
  PostAuthRbacResourceLocaleCreateData,
  PostAuthRbacResourceLocaleCreateErrors,
  PostAuthRbacResourceLocaleCreateResponses,
  PostAuthRbacResourceLocaleDeleteData,
  PostAuthRbacResourceLocaleDeleteErrors,
  PostAuthRbacResourceLocaleDeleteManyData,
  PostAuthRbacResourceLocaleDeleteManyErrors,
  PostAuthRbacResourceLocaleDeleteManyResponses,
  PostAuthRbacResourceLocaleDeleteResponses,
  PostAuthRbacResourceLocaleListData,
  PostAuthRbacResourceLocaleListErrors,
  PostAuthRbacResourceLocaleListResponses,
  PostAuthRbacResourceLocaleUpdateData,
  PostAuthRbacResourceLocaleUpdateErrors,
  PostAuthRbacResourceLocaleUpdateResponses,
  PostAuthRbacResourceUpdateData,
  PostAuthRbacResourceUpdateErrors,
  PostAuthRbacResourceUpdateResponses,
  PostAuthRbacRoleCreateData,
  PostAuthRbacRoleCreateErrors,
  PostAuthRbacRoleCreateResponses,
  PostAuthRbacRoleDeleteData,
  PostAuthRbacRoleDeleteErrors,
  PostAuthRbacRoleDeleteManyData,
  PostAuthRbacRoleDeleteManyErrors,
  PostAuthRbacRoleDeleteManyResponses,
  PostAuthRbacRoleDeleteResponses,
  PostAuthRbacRoleListData,
  PostAuthRbacRoleListErrors,
  PostAuthRbacRoleListResponses,
  PostAuthRbacRoleResourceRelationBatchSetData,
  PostAuthRbacRoleResourceRelationBatchSetErrors,
  PostAuthRbacRoleResourceRelationBatchSetResponses,
  PostAuthRbacRoleResourceRelationCreateData,
  PostAuthRbacRoleResourceRelationCreateErrors,
  PostAuthRbacRoleResourceRelationCreateResponses,
  PostAuthRbacRoleResourceRelationDeleteData,
  PostAuthRbacRoleResourceRelationDeleteErrors,
  PostAuthRbacRoleResourceRelationDeleteResponses,
  PostAuthRbacRoleResourceRelationListData,
  PostAuthRbacRoleResourceRelationListErrors,
  PostAuthRbacRoleResourceRelationListResponses,
  PostAuthRbacRoleUpdateData,
  PostAuthRbacRoleUpdateErrors,
  PostAuthRbacRoleUpdateResponses,
  PostAuthRbacUserCreateData,
  PostAuthRbacUserCreateErrors,
  PostAuthRbacUserCreateResponses,
  PostAuthRbacUserDeleteData,
  PostAuthRbacUserDeleteErrors,
  PostAuthRbacUserDeleteResponses,
  PostAuthRbacUserListData,
  PostAuthRbacUserListErrors,
  PostAuthRbacUserListResponses,
  PostAuthRbacUserRoleRelationCreateData,
  PostAuthRbacUserRoleRelationCreateErrors,
  PostAuthRbacUserRoleRelationCreateResponses,
  PostAuthRbacUserRoleRelationDeleteData,
  PostAuthRbacUserRoleRelationDeleteErrors,
  PostAuthRbacUserRoleRelationDeleteResponses,
  PostAuthRbacUserRoleRelationListData,
  PostAuthRbacUserRoleRelationListErrors,
  PostAuthRbacUserRoleRelationListResponses,
  PostAuthRefreshTokenData,
  PostAuthRefreshTokenErrors,
  PostAuthRefreshTokenResponses,
  PostAuthRequestPasswordResetData,
  PostAuthRequestPasswordResetErrors,
  PostAuthRequestPasswordResetResponses,
  PostAuthResetPasswordData,
  PostAuthResetPasswordErrors,
  PostAuthResetPasswordResponses,
  PostAuthRevokeOtherSessionsData,
  PostAuthRevokeOtherSessionsErrors,
  PostAuthRevokeOtherSessionsResponses,
  PostAuthRevokeSessionData,
  PostAuthRevokeSessionErrors,
  PostAuthRevokeSessionResponses,
  PostAuthRevokeSessionsData,
  PostAuthRevokeSessionsErrors,
  PostAuthRevokeSessionsResponses,
  PostAuthSendVerificationEmailData,
  PostAuthSendVerificationEmailErrors,
  PostAuthSendVerificationEmailResponses,
  PostAuthSignInEmailData,
  PostAuthSignInEmailErrors,
  PostAuthSignInEmailResponses,
  PostAuthSignInUsernameData,
  PostAuthSignInUsernameErrors,
  PostAuthSignInUsernameResponses,
  PostAuthSignOutData,
  PostAuthSignOutErrors,
  PostAuthSignOutResponses,
  PostAuthSignUpEmailData,
  PostAuthSignUpEmailErrors,
  PostAuthSignUpEmailResponses,
  PostAuthUnlinkAccountData,
  PostAuthUnlinkAccountErrors,
  PostAuthUnlinkAccountResponses,
  PostAuthUpdateUserData,
  PostAuthUpdateUserErrors,
  PostAuthUpdateUserResponses,
  PostGuestThingListData,
  PostGuestThingListResponses,
  PostThingCreateData,
  PostThingCreateResponses,
  PostThingDeleteData,
  PostThingGetData,
  PostThingGetResponses,
  PostThingListData,
  PostThingListResponses,
  PostThingUpdateData,
  PostThingUpdateResponses,
  SocialSignInData,
  SocialSignInErrors,
  SocialSignInResponses,
} from "./types.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const postGuestThingList = <ThrowOnError extends boolean = false>(
  options: Options<PostGuestThingListData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostGuestThingListResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: postGuestThingListResponseTransformer,
    url: "/guest/thing/list",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postThingCreate = <ThrowOnError extends boolean = false>(
  options: Options<PostThingCreateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostThingCreateResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: postThingCreateResponseTransformer,
    url: "/thing/create",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postThingUpdate = <ThrowOnError extends boolean = false>(
  options: Options<PostThingUpdateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostThingUpdateResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: postThingUpdateResponseTransformer,
    url: "/thing/update",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postThingDelete = <ThrowOnError extends boolean = false>(
  options: Options<PostThingDeleteData, ThrowOnError>,
) => {
  return (options.client ?? client).post<unknown, unknown, ThrowOnError>({
    url: "/thing/delete",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postThingGet = <ThrowOnError extends boolean = false>(
  options: Options<PostThingGetData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostThingGetResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: postThingGetResponseTransformer,
    url: "/thing/get",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postThingList = <ThrowOnError extends boolean = false>(
  options: Options<PostThingListData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostThingListResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: postThingListResponseTransformer,
    url: "/thing/list",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const getPublic = <ThrowOnError extends boolean = false>(
  options?: Options<GetPublicData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
    url: "/public/*",
    ...options,
  });
};

/**
 * Sign in with a social provider
 */
export const socialSignIn = <ThrowOnError extends boolean = false>(
  options: Options<SocialSignInData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    SocialSignInResponses,
    SocialSignInErrors,
    ThrowOnError
  >({
    url: "/auth/sign-in/social",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get the current session
 */
export const getAuthGetSession = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthGetSessionData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAuthGetSessionResponses,
    GetAuthGetSessionErrors,
    ThrowOnError
  >({
    url: "/auth/get-session",
    ...options,
  });
};

/**
 * Sign out the current user
 */
export const postAuthSignOut = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthSignOutData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthSignOutResponses,
    PostAuthSignOutErrors,
    ThrowOnError
  >({
    url: "/auth/sign-out",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Sign up a user using email and password
 */
export const postAuthSignUpEmail = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthSignUpEmailData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthSignUpEmailResponses,
    PostAuthSignUpEmailErrors,
    ThrowOnError
  >({
    responseTransformer: postAuthSignUpEmailResponseTransformer,
    url: "/auth/sign-up/email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Sign in with email and password
 */
export const postAuthSignInEmail = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthSignInEmailData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthSignInEmailResponses,
    PostAuthSignInEmailErrors,
    ThrowOnError
  >({
    responseTransformer: postAuthSignInEmailResponseTransformer,
    url: "/auth/sign-in/email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Send a password reset email to the user
 */
export const postAuthForgetPassword = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthForgetPasswordData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthForgetPasswordResponses,
    PostAuthForgetPasswordErrors,
    ThrowOnError
  >({
    url: "/auth/forget-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Reset the password for a user
 */
export const postAuthResetPassword = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthResetPasswordData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthResetPasswordResponses,
    PostAuthResetPasswordErrors,
    ThrowOnError
  >({
    url: "/auth/reset-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Verify the email of the user
 */
export const getAuthVerifyEmail = <ThrowOnError extends boolean = false>(
  options: Options<GetAuthVerifyEmailData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetAuthVerifyEmailResponses,
    GetAuthVerifyEmailErrors,
    ThrowOnError
  >({
    url: "/auth/verify-email",
    ...options,
  });
};

/**
 * Send a verification email to the user
 */
export const postAuthSendVerificationEmail = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthSendVerificationEmailData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthSendVerificationEmailResponses,
    PostAuthSendVerificationEmailErrors,
    ThrowOnError
  >({
    url: "/auth/send-verification-email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postAuthChangeEmail = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthChangeEmailData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthChangeEmailResponses,
    PostAuthChangeEmailErrors,
    ThrowOnError
  >({
    url: "/auth/change-email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Change the password of the user
 */
export const postAuthChangePassword = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthChangePasswordData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthChangePasswordResponses,
    PostAuthChangePasswordErrors,
    ThrowOnError
  >({
    responseTransformer: postAuthChangePasswordResponseTransformer,
    url: "/auth/change-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Update the current user
 */
export const postAuthUpdateUser = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthUpdateUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthUpdateUserResponses,
    PostAuthUpdateUserErrors,
    ThrowOnError
  >({
    url: "/auth/update-user",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete the user
 */
export const postAuthDeleteUser = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthDeleteUserData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthDeleteUserResponses,
    PostAuthDeleteUserErrors,
    ThrowOnError
  >({
    url: "/auth/delete-user",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Redirects the user to the callback URL with the token
 */
export const getAuthResetPasswordByToken = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetAuthResetPasswordByTokenData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAuthResetPasswordByTokenResponses,
    GetAuthResetPasswordByTokenErrors,
    ThrowOnError
  >({
    url: "/auth/reset-password/{token}",
    ...options,
  });
};

/**
 * Send a password reset email to the user
 */
export const postAuthRequestPasswordReset = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostAuthRequestPasswordResetData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthRequestPasswordResetResponses,
    PostAuthRequestPasswordResetErrors,
    ThrowOnError
  >({
    url: "/auth/request-password-reset",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all active sessions for the user
 */
export const getAuthListSessions = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthListSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAuthListSessionsResponses,
    GetAuthListSessionsErrors,
    ThrowOnError
  >({
    url: "/auth/list-sessions",
    ...options,
  });
};

/**
 * Revoke a single session
 */
export const postAuthRevokeSession = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthRevokeSessionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRevokeSessionResponses,
    PostAuthRevokeSessionErrors,
    ThrowOnError
  >({
    url: "/auth/revoke-session",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Revoke all sessions for the user
 */
export const postAuthRevokeSessions = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthRevokeSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRevokeSessionsResponses,
    PostAuthRevokeSessionsErrors,
    ThrowOnError
  >({
    url: "/auth/revoke-sessions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Revoke all other sessions for the user except the current one
 */
export const postAuthRevokeOtherSessions = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthRevokeOtherSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRevokeOtherSessionsResponses,
    PostAuthRevokeOtherSessionsErrors,
    ThrowOnError
  >({
    url: "/auth/revoke-other-sessions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Link a social account to the user
 */
export const postAuthLinkSocial = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthLinkSocialData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthLinkSocialResponses,
    PostAuthLinkSocialErrors,
    ThrowOnError
  >({
    url: "/auth/link-social",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all accounts linked to the user
 */
export const getAuthListAccounts = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthListAccountsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAuthListAccountsResponses,
    GetAuthListAccountsErrors,
    ThrowOnError
  >({
    responseTransformer: getAuthListAccountsResponseTransformer,
    url: "/auth/list-accounts",
    ...options,
  });
};

/**
 * Callback to complete user deletion with verification token
 */
export const getAuthDeleteUserCallback = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthDeleteUserCallbackData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAuthDeleteUserCallbackResponses,
    GetAuthDeleteUserCallbackErrors,
    ThrowOnError
  >({
    url: "/auth/delete-user/callback",
    ...options,
  });
};

/**
 * Unlink an account
 */
export const postAuthUnlinkAccount = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthUnlinkAccountData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthUnlinkAccountResponses,
    PostAuthUnlinkAccountErrors,
    ThrowOnError
  >({
    url: "/auth/unlink-account",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Refresh the access token using a refresh token
 */
export const postAuthRefreshToken = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthRefreshTokenData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthRefreshTokenResponses,
    PostAuthRefreshTokenErrors,
    ThrowOnError
  >({
    responseTransformer: postAuthRefreshTokenResponseTransformer,
    url: "/auth/refresh-token",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get a valid access token, doing a refresh if needed
 */
export const postAuthGetAccessToken = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthGetAccessTokenData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthGetAccessTokenResponses,
    PostAuthGetAccessTokenErrors,
    ThrowOnError
  >({
    responseTransformer: postAuthGetAccessTokenResponseTransformer,
    url: "/auth/get-access-token",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get the account info provided by the provider
 */
export const postAuthAccountInfo = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthAccountInfoData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthAccountInfoResponses,
    PostAuthAccountInfoErrors,
    ThrowOnError
  >({
    url: "/auth/account-info",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Check if the API is working
 */
export const getAuthOk = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthOkData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAuthOkResponses,
    GetAuthOkErrors,
    ThrowOnError
  >({
    url: "/auth/ok",
    ...options,
  });
};

/**
 * Displays an error page
 */
export const getAuthError = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthErrorData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAuthErrorResponses,
    GetAuthErrorErrors,
    ThrowOnError
  >({
    url: "/auth/error",
    ...options,
  });
};

/**
 * Sign in with username
 */
export const postAuthSignInUsername = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthSignInUsernameData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthSignInUsernameResponses,
    PostAuthSignInUsernameErrors,
    ThrowOnError
  >({
    url: "/auth/sign-in/username",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postAuthIsUsernameAvailable = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostAuthIsUsernameAvailableData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    unknown,
    PostAuthIsUsernameAvailableErrors,
    ThrowOnError
  >({
    url: "/auth/is-username-available",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create a role
 */
export const postAuthRbacRoleCreate = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthRbacRoleCreateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthRbacRoleCreateResponses,
    PostAuthRbacRoleCreateErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/role/create",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Update a role
 */
export const postAuthRbacRoleUpdate = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthRbacRoleUpdateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthRbacRoleUpdateResponses,
    PostAuthRbacRoleUpdateErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/role/update",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete a role
 */
export const postAuthRbacRoleDelete = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthRbacRoleDeleteData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthRbacRoleDeleteResponses,
    PostAuthRbacRoleDeleteErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/role/delete",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete many roles
 */
export const postAuthRbacRoleDeleteMany = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostAuthRbacRoleDeleteManyData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthRbacRoleDeleteManyResponses,
    PostAuthRbacRoleDeleteManyErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/role/delete-many",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get a role
 */
export const getAuthRbacRoleGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthRbacRoleGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAuthRbacRoleGetResponses,
    GetAuthRbacRoleGetErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/role/get",
    ...options,
  });
};

/**
 * List roles
 */
export const postAuthRbacRoleList = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthRbacRoleListData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRbacRoleListResponses,
    PostAuthRbacRoleListErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/role/list",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create a resource
 */
export const postAuthRbacResourceCreate = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthRbacResourceCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRbacResourceCreateResponses,
    PostAuthRbacResourceCreateErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/resource/create",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Update a resource
 */
export const postAuthRbacResourceUpdate = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthRbacResourceUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRbacResourceUpdateResponses,
    PostAuthRbacResourceUpdateErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/resource/update",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete a resource
 */
export const postAuthRbacResourceDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostAuthRbacResourceDeleteData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthRbacResourceDeleteResponses,
    PostAuthRbacResourceDeleteErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/resource/delete",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete many resources
 */
export const postAuthRbacResourceDeleteMany = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostAuthRbacResourceDeleteManyData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthRbacResourceDeleteManyResponses,
    PostAuthRbacResourceDeleteManyErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/resource/delete-many",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get a resource
 */
export const getAuthRbacResourceGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthRbacResourceGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAuthRbacResourceGetResponses,
    GetAuthRbacResourceGetErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/resource/get",
    ...options,
  });
};

/**
 * List resources
 */
export const postAuthRbacResourceList = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthRbacResourceListData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRbacResourceListResponses,
    PostAuthRbacResourceListErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/resource/list",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create a resource locale
 */
export const postAuthRbacResourceLocaleCreate = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthRbacResourceLocaleCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRbacResourceLocaleCreateResponses,
    PostAuthRbacResourceLocaleCreateErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/resource-locale/create",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Update a resource locale
 */
export const postAuthRbacResourceLocaleUpdate = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthRbacResourceLocaleUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRbacResourceLocaleUpdateResponses,
    PostAuthRbacResourceLocaleUpdateErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/resource-locale/update",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete a resource locale
 */
export const postAuthRbacResourceLocaleDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostAuthRbacResourceLocaleDeleteData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthRbacResourceLocaleDeleteResponses,
    PostAuthRbacResourceLocaleDeleteErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/resource-locale/delete",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete many resource locales
 */
export const postAuthRbacResourceLocaleDeleteMany = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostAuthRbacResourceLocaleDeleteManyData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthRbacResourceLocaleDeleteManyResponses,
    PostAuthRbacResourceLocaleDeleteManyErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/resource-locale/delete-many",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get a resource locale
 */
export const getAuthRbacResourceLocaleGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetAuthRbacResourceLocaleGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAuthRbacResourceLocaleGetResponses,
    GetAuthRbacResourceLocaleGetErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/resource-locale/get",
    ...options,
  });
};

/**
 * List resource locales
 */
export const postAuthRbacResourceLocaleList = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthRbacResourceLocaleListData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRbacResourceLocaleListResponses,
    PostAuthRbacResourceLocaleListErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/resource-locale/list",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create a user role relation
 */
export const postAuthRbacUserRoleRelationCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostAuthRbacUserRoleRelationCreateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthRbacUserRoleRelationCreateResponses,
    PostAuthRbacUserRoleRelationCreateErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/user-role-relation/create",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete a user role relation
 */
export const postAuthRbacUserRoleRelationDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostAuthRbacUserRoleRelationDeleteData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthRbacUserRoleRelationDeleteResponses,
    PostAuthRbacUserRoleRelationDeleteErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/user-role-relation/delete",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List role resource relations
 */
export const postAuthRbacUserRoleRelationList = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthRbacUserRoleRelationListData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRbacUserRoleRelationListResponses,
    PostAuthRbacUserRoleRelationListErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/user-role-relation/list",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create a user role relation
 */
export const postAuthRbacRoleResourceRelationCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostAuthRbacRoleResourceRelationCreateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthRbacRoleResourceRelationCreateResponses,
    PostAuthRbacRoleResourceRelationCreateErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/role-resource-relation/create",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete a role resource relation
 */
export const postAuthRbacRoleResourceRelationDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostAuthRbacRoleResourceRelationDeleteData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthRbacRoleResourceRelationDeleteResponses,
    PostAuthRbacRoleResourceRelationDeleteErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/role-resource-relation/delete",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Batch set role resource relation
 */
export const postAuthRbacRoleResourceRelationBatchSet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostAuthRbacRoleResourceRelationBatchSetData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthRbacRoleResourceRelationBatchSetResponses,
    PostAuthRbacRoleResourceRelationBatchSetErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/role-resource-relation/batch-set",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List role resource relations
 */
export const postAuthRbacRoleResourceRelationList = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthRbacRoleResourceRelationListData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRbacRoleResourceRelationListResponses,
    PostAuthRbacRoleResourceRelationListErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/role-resource-relation/list",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List user roles
 */
export const postAuthRbacListUserRoles = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthRbacListUserRolesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRbacListUserRolesResponses,
    PostAuthRbacListUserRolesErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/list-user-roles",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List user resources
 */
export const postAuthRbacListUserResources = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthRbacListUserResourcesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRbacListUserResourcesResponses,
    PostAuthRbacListUserResourcesErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/list-user-resources",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List user resource tree
 */
export const postAuthRbacListUserResourceTree = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostAuthRbacListUserResourceTreeData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthRbacListUserResourceTreeResponses,
    PostAuthRbacListUserResourceTreeErrors,
    ThrowOnError
  >({
    responseTransformer: postAuthRbacListUserResourceTreeResponseTransformer,
    url: "/auth/rbac/list-user-resource-tree",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List roles with grant
 */
export const postAuthRbacListUserRolesWithGrant = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthRbacListUserRolesWithGrantData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRbacListUserRolesWithGrantResponses,
    PostAuthRbacListUserRolesWithGrantErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/list-user-roles-with-grant",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List role users
 */
export const postAuthRbacListRoleUsers = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthRbacListRoleUsersData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRbacListRoleUsersResponses,
    PostAuthRbacListRoleUsersErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/list-role-users",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List role resources
 */
export const postAuthRbacListRoleResources = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthRbacListRoleResourcesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRbacListRoleResourcesResponses,
    PostAuthRbacListRoleResourcesErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/list-role-resources",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List role resource tree
 */
export const postAuthRbacListRoleResourceTree = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthRbacListRoleResourceTreeData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRbacListRoleResourceTreeResponses,
    PostAuthRbacListRoleResourceTreeErrors,
    ThrowOnError
  >({
    responseTransformer: postAuthRbacListRoleResourceTreeResponseTransformer,
    url: "/auth/rbac/list-role-resource-tree",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List resource roles
 */
export const postAuthRbacListResourceRoles = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthRbacListResourceRolesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRbacListResourceRolesResponses,
    PostAuthRbacListResourceRolesErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/list-resource-roles",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List resource users
 */
export const postAuthRbacListResourceUsers = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthRbacListResourceUsersData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRbacListResourceUsersResponses,
    PostAuthRbacListResourceUsersErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/list-resource-users",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List resource tree
 */
export const postAuthRbacListResourceTree = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthRbacListResourceTreeData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRbacListResourceTreeResponses,
    PostAuthRbacListResourceTreeErrors,
    ThrowOnError
  >({
    responseTransformer: postAuthRbacListResourceTreeResponseTransformer,
    url: "/auth/rbac/list-resource-tree",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Create a user
 */
export const postAuthRbacUserCreate = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthRbacUserCreateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthRbacUserCreateResponses,
    PostAuthRbacUserCreateErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/user/create",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete a user
 */
export const postAuthRbacUserDelete = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthRbacUserDeleteData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostAuthRbacUserDeleteResponses,
    PostAuthRbacUserDeleteErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/user/delete",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List users
 */
export const postAuthRbacUserList = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthRbacUserListData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRbacUserListResponses,
    PostAuthRbacUserListErrors,
    ThrowOnError
  >({
    url: "/auth/rbac/user/list",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get user resource tree
 */
export const postAuthRbacGetUserResourceTree = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthRbacGetUserResourceTreeData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAuthRbacGetUserResourceTreeResponses,
    PostAuthRbacGetUserResourceTreeErrors,
    ThrowOnError
  >({
    responseTransformer: postAuthRbacGetUserResourceTreeResponseTransformer,
    url: "/auth/rbac/get-user-resource-tree",
    ...options,
  });
};
