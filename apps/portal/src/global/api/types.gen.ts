// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
  baseUrl: "http://localhost:3000" | (string & {});
};

export type User = {
  id: string;
  name: string;
  email: string;
  emailVerified: boolean;
  image?: string;
  createdAt: string;
  updatedAt: string;
  username?: string;
  displayUsername?: string;
};

export type Session = {
  id: string;
  expiresAt: string;
  token: string;
  createdAt: string;
  updatedAt: string;
  ipAddress?: string;
  userAgent?: string;
  userId: string;
};

export type Account = {
  id: string;
  accountId: string;
  providerId: string;
  userId: string;
  accessToken?: string;
  refreshToken?: string;
  idToken?: string;
  accessTokenExpiresAt?: string;
  refreshTokenExpiresAt?: string;
  scope?: string;
  password?: string;
  createdAt: string;
  updatedAt: string;
};

export type Verification = {
  id: string;
  identifier: string;
  value: string;
  expiresAt: string;
  createdAt?: string;
  updatedAt?: string;
};

export type Role = {
  id: string;
  readonly createdAt?: string;
  readonly updatedAt?: string;
  readonly createdBy?: string;
  readonly updatedBy?: string;
  name: string;
  enabled?: boolean;
  remark?: string;
};

export type Resource = {
  id: string;
  readonly createdAt?: string;
  readonly updatedAt?: string;
  readonly createdBy?: string;
  readonly updatedBy?: string;
  name: string;
  enabled?: boolean;
  remark?: string;
  sort?: number;
  parentId?: string;
  type: "Menu" | "Page" | "Element";
  path?: string;
  activePath?: string;
  component?: string;
  icon?: string;
  isLink?: boolean;
  isCache?: boolean;
  isAffix?: boolean;
  isShow?: boolean;
};

export type UserRoleRelation = {
  id: string;
  userId: string;
  roleId: string;
};

export type RoleResourceRelation = {
  id: string;
  roleId: string;
  resourceId: string;
};

export type ResourceLocale = {
  id: string;
  readonly createdAt?: string;
  readonly updatedAt?: string;
  readonly createdBy?: string;
  readonly updatedBy?: string;
  resourceId: string;
  field: string;
  enUs: string;
  zhCn: string;
};

export type ResourceNode = {
  id: string;
  readonly createdAt?: string;
  readonly updatedAt?: string;
  readonly createdBy?: string;
  readonly updatedBy?: string;
  name: string;
  enabled?: boolean;
  remark?: string;
  sort?: number;
  parentId?: string;
  type: "Menu" | "Page" | "Element";
  path?: string;
  activePath?: string;
  component?: string;
  icon?: string;
  isLink?: boolean;
  isCache?: boolean;
  isAffix?: boolean;
  isShow?: boolean;
  locales?: Array<ResourceLocale>;
  children?: Array<ResourceNode>;
};

export type RoleWritable = {
  id: string;
  name: string;
  enabled?: boolean;
  remark?: string;
};

export type ResourceWritable = {
  id: string;
  name: string;
  enabled?: boolean;
  remark?: string;
  sort?: number;
  parentId?: string;
  type: "Menu" | "Page" | "Element";
  path?: string;
  activePath?: string;
  component?: string;
  icon?: string;
  isLink?: boolean;
  isCache?: boolean;
  isAffix?: boolean;
  isShow?: boolean;
};

export type ResourceLocaleWritable = {
  id: string;
  resourceId: string;
  field: string;
  enUs: string;
  zhCn: string;
};

export type ResourceNodeWritable = {
  id: string;
  name: string;
  enabled?: boolean;
  remark?: string;
  sort?: number;
  parentId?: string;
  type: "Menu" | "Page" | "Element";
  path?: string;
  activePath?: string;
  component?: string;
  icon?: string;
  isLink?: boolean;
  isCache?: boolean;
  isAffix?: boolean;
  isShow?: boolean;
  locales?: Array<ResourceLocaleWritable>;
  children?: Array<ResourceNodeWritable>;
};

export type PostGuestThingListData = {
  body: {
    page?: number;
    pageSize?: number;
    id?: string | null;
    categoryIds?: Array<string> | null;
    title?: string | null;
    userId?: string | null;
    status?: Array<"Draft" | "Pending" | "Passed"> | null;
    sortBy?: {
      field?:
        | "id"
        | "createdAt"
        | "updatedAt"
        | "createdBy"
        | "updatedBy"
        | "categoryId"
        | "userId"
        | "title"
        | "description"
        | "cover"
        | "content"
        | "status";
      direction?: "asc" | "desc";
    } | null;
  };
  path?: never;
  query?: never;
  url: "/guest/thing/list";
};

export type PostGuestThingListResponses = {
  /**
   * Response for status 200
   */
  200: {
    records: Array<{
      id: string;
      createdAt?: Date | null;
      updatedAt?: Date | null;
      createdBy: string | null;
      updatedBy: string | null;
      categoryId: string;
      userId: string;
      title: string;
      description: string;
      cover: string | null;
      content: string | null;
      status: "Draft" | "Pending" | "Passed";
    }>;
    total: number;
  };
};

export type PostGuestThingListResponse =
  PostGuestThingListResponses[keyof PostGuestThingListResponses];

export type PostThingCreateData = {
  body: {
    categoryId: string;
    title: string;
    description: string;
    cover?: string | null;
    content?: string | null;
  };
  path?: never;
  query?: never;
  url: "/thing/create";
};

export type PostThingCreateResponses = {
  /**
   * Response for status 200
   */
  200: {
    id: string;
    createdAt?: Date | null;
    updatedAt?: Date | null;
    createdBy: string | null;
    updatedBy: string | null;
    categoryId: string;
    userId: string;
    title: string;
    description: string;
    cover: string | null;
    content: string | null;
    status: "Draft" | "Pending" | "Passed";
  };
};

export type PostThingCreateResponse =
  PostThingCreateResponses[keyof PostThingCreateResponses];

export type PostThingUpdateData = {
  body: {
    id: string;
    categoryId: string;
    title: string;
    description: string;
    cover?: string | null;
    content?: string | null;
  };
  path?: never;
  query?: never;
  url: "/thing/update";
};

export type PostThingUpdateResponses = {
  /**
   * Response for status 200
   */
  200: {
    id: string;
    createdAt?: Date | null;
    updatedAt?: Date | null;
    createdBy: string | null;
    updatedBy: string | null;
    categoryId: string;
    userId: string;
    title: string;
    description: string;
    cover: string | null;
    content: string | null;
    status: "Draft" | "Pending" | "Passed";
  };
};

export type PostThingUpdateResponse =
  PostThingUpdateResponses[keyof PostThingUpdateResponses];

export type PostThingDeleteData = {
  body: {
    id: string;
  };
  path?: never;
  query?: never;
  url: "/thing/delete";
};

export type PostThingGetData = {
  body: {
    id: string;
  };
  path?: never;
  query?: never;
  url: "/thing/get";
};

export type PostThingGetResponses = {
  /**
   * Response for status 200
   */
  200: {
    id: string;
    createdAt?: Date | null;
    updatedAt?: Date | null;
    createdBy: string | null;
    updatedBy: string | null;
    categoryId: string;
    userId: string;
    title: string;
    description: string;
    cover: string | null;
    content: string | null;
    status: "Draft" | "Pending" | "Passed";
  };
};

export type PostThingGetResponse =
  PostThingGetResponses[keyof PostThingGetResponses];

export type PostThingListData = {
  body: {
    page?: number;
    pageSize?: number;
    id?: string | null;
    categoryIds?: Array<string> | null;
    title?: string | null;
    userId?: string | null;
    status?: Array<"Draft" | "Pending" | "Passed"> | null;
    sortBy?: {
      field?:
        | "id"
        | "createdAt"
        | "updatedAt"
        | "createdBy"
        | "updatedBy"
        | "categoryId"
        | "userId"
        | "title"
        | "description"
        | "cover"
        | "content"
        | "status";
      direction?: "asc" | "desc";
    } | null;
  };
  path?: never;
  query?: never;
  url: "/thing/list";
};

export type PostThingListResponses = {
  /**
   * Response for status 200
   */
  200: {
    records: Array<{
      id: string;
      createdAt?: Date | null;
      updatedAt?: Date | null;
      createdBy: string | null;
      updatedBy: string | null;
      categoryId: string;
      userId: string;
      title: string;
      description: string;
      cover: string | null;
      content: string | null;
      status: "Draft" | "Pending" | "Passed";
    }>;
    total: number;
  };
};

export type PostThingListResponse =
  PostThingListResponses[keyof PostThingListResponses];

export type GetPublicData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/public/*";
};

export type SocialSignInData = {
  body: {
    callbackURL?: string;
    newUserCallbackURL?: string;
    errorCallbackURL?: string;
    provider: string;
    disableRedirect?: boolean;
    idToken?: {
      [key: string]: unknown;
    };
    scopes?: Array<unknown>;
    requestSignUp?: boolean;
    loginHint?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/sign-in/social";
};

export type SocialSignInErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type SocialSignInError = SocialSignInErrors[keyof SocialSignInErrors];

export type SocialSignInResponses = {
  /**
   * Session response when idToken is provided
   */
  200: {
    redirect: false;
    /**
     * Session token
     */
    token: string;
  };
};

export type SocialSignInResponse =
  SocialSignInResponses[keyof SocialSignInResponses];

export type GetAuthGetSessionData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/get-session";
};

export type GetAuthGetSessionErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthGetSessionError =
  GetAuthGetSessionErrors[keyof GetAuthGetSessionErrors];

export type GetAuthGetSessionResponses = {
  /**
   * Success
   */
  200: {
    session: Session;
    user: User;
  };
};

export type GetAuthGetSessionResponse =
  GetAuthGetSessionResponses[keyof GetAuthGetSessionResponses];

export type PostAuthSignOutData = {
  body?: {
    [key: string]: unknown;
  };
  path?: never;
  query?: never;
  url: "/auth/sign-out";
};

export type PostAuthSignOutErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthSignOutError =
  PostAuthSignOutErrors[keyof PostAuthSignOutErrors];

export type PostAuthSignOutResponses = {
  /**
   * Success
   */
  200: {
    success?: boolean;
  };
};

export type PostAuthSignOutResponse =
  PostAuthSignOutResponses[keyof PostAuthSignOutResponses];

export type PostAuthSignUpEmailData = {
  body?: {
    /**
     * The name of the user
     */
    name: string;
    /**
     * The email of the user
     */
    email: string;
    /**
     * The password of the user
     */
    password: string;
    /**
     * The profile image URL of the user
     */
    image?: string;
    /**
     * The URL to use for email verification callback
     */
    callbackURL?: string;
    /**
     * If this is false, the session will not be remembered. Default is `true`.
     */
    rememberMe?: boolean;
  };
  path?: never;
  query?: never;
  url: "/auth/sign-up/email";
};

export type PostAuthSignUpEmailErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthSignUpEmailError =
  PostAuthSignUpEmailErrors[keyof PostAuthSignUpEmailErrors];

export type PostAuthSignUpEmailResponses = {
  /**
   * Successfully created user
   */
  200: {
    /**
     * Authentication token for the session
     */
    token?: string;
    user: {
      /**
       * The unique identifier of the user
       */
      id: string;
      /**
       * The email address of the user
       */
      email: string;
      /**
       * The name of the user
       */
      name: string;
      /**
       * The profile image URL of the user
       */
      image?: string;
      /**
       * Whether the email has been verified
       */
      emailVerified: boolean;
      /**
       * When the user was created
       */
      createdAt: Date;
      /**
       * When the user was last updated
       */
      updatedAt: Date;
    };
  };
};

export type PostAuthSignUpEmailResponse =
  PostAuthSignUpEmailResponses[keyof PostAuthSignUpEmailResponses];

export type PostAuthSignInEmailData = {
  body: {
    /**
     * Email of the user
     */
    email: string;
    /**
     * Password of the user
     */
    password: string;
    callbackURL?: string;
    rememberMe?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/sign-in/email";
};

export type PostAuthSignInEmailErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthSignInEmailError =
  PostAuthSignInEmailErrors[keyof PostAuthSignInEmailErrors];

export type PostAuthSignInEmailResponses = {
  /**
   * Session response when idToken is provided
   */
  200: {
    redirect: false;
    /**
     * Session token
     */
    token: string;
    url?: null;
    user: {
      id: string;
      email: string;
      name?: string;
      image?: string;
      emailVerified: boolean;
      createdAt: Date;
      updatedAt: Date;
    };
  };
};

export type PostAuthSignInEmailResponse =
  PostAuthSignInEmailResponses[keyof PostAuthSignInEmailResponses];

export type PostAuthForgetPasswordData = {
  body: {
    /**
     * The email address of the user to send a password reset email to
     */
    email: string;
    redirectTo?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/forget-password";
};

export type PostAuthForgetPasswordErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthForgetPasswordError =
  PostAuthForgetPasswordErrors[keyof PostAuthForgetPasswordErrors];

export type PostAuthForgetPasswordResponses = {
  /**
   * Success
   */
  200: {
    status?: boolean;
    message?: string;
  };
};

export type PostAuthForgetPasswordResponse =
  PostAuthForgetPasswordResponses[keyof PostAuthForgetPasswordResponses];

export type PostAuthResetPasswordData = {
  body: {
    /**
     * The new password to set
     */
    newPassword: string;
    token?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/reset-password";
};

export type PostAuthResetPasswordErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthResetPasswordError =
  PostAuthResetPasswordErrors[keyof PostAuthResetPasswordErrors];

export type PostAuthResetPasswordResponses = {
  /**
   * Success
   */
  200: {
    status?: boolean;
  };
};

export type PostAuthResetPasswordResponse =
  PostAuthResetPasswordResponses[keyof PostAuthResetPasswordResponses];

export type GetAuthVerifyEmailData = {
  body?: never;
  path?: never;
  query: {
    /**
     * The token to verify the email
     */
    token: string;
    /**
     * The URL to redirect to after email verification
     */
    callbackURL?: string;
  };
  url: "/auth/verify-email";
};

export type GetAuthVerifyEmailErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthVerifyEmailError =
  GetAuthVerifyEmailErrors[keyof GetAuthVerifyEmailErrors];

export type GetAuthVerifyEmailResponses = {
  /**
   * Success
   */
  200: {
    user: {
      /**
       * User ID
       */
      id: string;
      /**
       * User email
       */
      email: string;
      /**
       * User name
       */
      name: string;
      /**
       * User image URL
       */
      image: string;
      /**
       * Indicates if the user email is verified
       */
      emailVerified: boolean;
      /**
       * User creation date
       */
      createdAt: string;
      /**
       * User update date
       */
      updatedAt: string;
    };
    /**
     * Indicates if the email was verified successfully
     */
    status: boolean;
  };
};

export type GetAuthVerifyEmailResponse =
  GetAuthVerifyEmailResponses[keyof GetAuthVerifyEmailResponses];

export type PostAuthSendVerificationEmailData = {
  body?: {
    /**
     * The email to send the verification email to
     */
    email: string;
    /**
     * The URL to use for email verification callback
     */
    callbackURL?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/send-verification-email";
};

export type PostAuthSendVerificationEmailErrors = {
  /**
   * Bad Request
   */
  400: {
    /**
     * Error message
     */
    message?: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthSendVerificationEmailError =
  PostAuthSendVerificationEmailErrors[keyof PostAuthSendVerificationEmailErrors];

export type PostAuthSendVerificationEmailResponses = {
  /**
   * Success
   */
  200: {
    /**
     * Indicates if the email was sent successfully
     */
    status?: boolean;
  };
};

export type PostAuthSendVerificationEmailResponse =
  PostAuthSendVerificationEmailResponses[keyof PostAuthSendVerificationEmailResponses];

export type PostAuthChangeEmailData = {
  body: {
    /**
     * The new email address to set must be a valid email address
     */
    newEmail: string;
    callbackURL?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/change-email";
};

export type PostAuthChangeEmailErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthChangeEmailError =
  PostAuthChangeEmailErrors[keyof PostAuthChangeEmailErrors];

export type PostAuthChangeEmailResponses = {
  /**
   * Email change request processed successfully
   */
  200: {
    /**
     * Indicates if the request was successful
     */
    status: boolean;
    /**
     * Status message of the email change process
     */
    message?: "Email updated" | "Verification email sent";
  };
};

export type PostAuthChangeEmailResponse =
  PostAuthChangeEmailResponses[keyof PostAuthChangeEmailResponses];

export type PostAuthChangePasswordData = {
  body: {
    /**
     * The new password to set
     */
    newPassword: string;
    /**
     * The current password is required
     */
    currentPassword: string;
    revokeOtherSessions?: boolean;
  };
  path?: never;
  query?: never;
  url: "/auth/change-password";
};

export type PostAuthChangePasswordErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthChangePasswordError =
  PostAuthChangePasswordErrors[keyof PostAuthChangePasswordErrors];

export type PostAuthChangePasswordResponses = {
  /**
   * Password successfully changed
   */
  200: {
    /**
     * New session token if other sessions were revoked
     */
    token?: string;
    user: {
      /**
       * The unique identifier of the user
       */
      id: string;
      /**
       * The email address of the user
       */
      email: string;
      /**
       * The name of the user
       */
      name: string;
      /**
       * The profile image URL of the user
       */
      image?: string;
      /**
       * Whether the email has been verified
       */
      emailVerified: boolean;
      /**
       * When the user was created
       */
      createdAt: Date;
      /**
       * When the user was last updated
       */
      updatedAt: Date;
    };
  };
};

export type PostAuthChangePasswordResponse =
  PostAuthChangePasswordResponses[keyof PostAuthChangePasswordResponses];

export type PostAuthUpdateUserData = {
  body?: {
    /**
     * The name of the user
     */
    name?: string;
    /**
     * The image of the user
     */
    image?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/update-user";
};

export type PostAuthUpdateUserErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthUpdateUserError =
  PostAuthUpdateUserErrors[keyof PostAuthUpdateUserErrors];

export type PostAuthUpdateUserResponses = {
  /**
   * Success
   */
  200: {
    /**
     * Indicates if the update was successful
     */
    status?: boolean;
  };
};

export type PostAuthUpdateUserResponse =
  PostAuthUpdateUserResponses[keyof PostAuthUpdateUserResponses];

export type PostAuthDeleteUserData = {
  body: {
    callbackURL?: string;
    password?: string;
    token?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/delete-user";
};

export type PostAuthDeleteUserErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthDeleteUserError =
  PostAuthDeleteUserErrors[keyof PostAuthDeleteUserErrors];

export type PostAuthDeleteUserResponses = {
  /**
   * User deletion processed successfully
   */
  200: {
    /**
     * Indicates if the operation was successful
     */
    success: boolean;
    /**
     * Status message of the deletion process
     */
    message: "User deleted" | "Verification email sent";
  };
};

export type PostAuthDeleteUserResponse =
  PostAuthDeleteUserResponses[keyof PostAuthDeleteUserResponses];

export type GetAuthResetPasswordByTokenData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The URL to redirect the user to reset their password
     */
    callbackURL?: string;
  };
  url: "/auth/reset-password/{token}";
};

export type GetAuthResetPasswordByTokenErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthResetPasswordByTokenError =
  GetAuthResetPasswordByTokenErrors[keyof GetAuthResetPasswordByTokenErrors];

export type GetAuthResetPasswordByTokenResponses = {
  /**
   * Success
   */
  200: {
    token?: string;
  };
};

export type GetAuthResetPasswordByTokenResponse =
  GetAuthResetPasswordByTokenResponses[keyof GetAuthResetPasswordByTokenResponses];

export type PostAuthRequestPasswordResetData = {
  body: {
    /**
     * The email address of the user to send a password reset email to
     */
    email: string;
    redirectTo?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/request-password-reset";
};

export type PostAuthRequestPasswordResetErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRequestPasswordResetError =
  PostAuthRequestPasswordResetErrors[keyof PostAuthRequestPasswordResetErrors];

export type PostAuthRequestPasswordResetResponses = {
  /**
   * Success
   */
  200: {
    status?: boolean;
    message?: string;
  };
};

export type PostAuthRequestPasswordResetResponse =
  PostAuthRequestPasswordResetResponses[keyof PostAuthRequestPasswordResetResponses];

export type GetAuthListSessionsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/list-sessions";
};

export type GetAuthListSessionsErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthListSessionsError =
  GetAuthListSessionsErrors[keyof GetAuthListSessionsErrors];

export type GetAuthListSessionsResponses = {
  /**
   * Success
   */
  200: Array<Session>;
};

export type GetAuthListSessionsResponse =
  GetAuthListSessionsResponses[keyof GetAuthListSessionsResponses];

export type PostAuthRevokeSessionData = {
  body?: {
    /**
     * The token to revoke
     */
    token: string;
  };
  path?: never;
  query?: never;
  url: "/auth/revoke-session";
};

export type PostAuthRevokeSessionErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRevokeSessionError =
  PostAuthRevokeSessionErrors[keyof PostAuthRevokeSessionErrors];

export type PostAuthRevokeSessionResponses = {
  /**
   * Success
   */
  200: {
    /**
     * Indicates if the session was revoked successfully
     */
    status: boolean;
  };
};

export type PostAuthRevokeSessionResponse =
  PostAuthRevokeSessionResponses[keyof PostAuthRevokeSessionResponses];

export type PostAuthRevokeSessionsData = {
  body?: {
    [key: string]: unknown;
  };
  path?: never;
  query?: never;
  url: "/auth/revoke-sessions";
};

export type PostAuthRevokeSessionsErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRevokeSessionsError =
  PostAuthRevokeSessionsErrors[keyof PostAuthRevokeSessionsErrors];

export type PostAuthRevokeSessionsResponses = {
  /**
   * Success
   */
  200: {
    /**
     * Indicates if all sessions were revoked successfully
     */
    status: boolean;
  };
};

export type PostAuthRevokeSessionsResponse =
  PostAuthRevokeSessionsResponses[keyof PostAuthRevokeSessionsResponses];

export type PostAuthRevokeOtherSessionsData = {
  body?: {
    [key: string]: unknown;
  };
  path?: never;
  query?: never;
  url: "/auth/revoke-other-sessions";
};

export type PostAuthRevokeOtherSessionsErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRevokeOtherSessionsError =
  PostAuthRevokeOtherSessionsErrors[keyof PostAuthRevokeOtherSessionsErrors];

export type PostAuthRevokeOtherSessionsResponses = {
  /**
   * Success
   */
  200: {
    /**
     * Indicates if all other sessions were revoked successfully
     */
    status: boolean;
  };
};

export type PostAuthRevokeOtherSessionsResponse =
  PostAuthRevokeOtherSessionsResponses[keyof PostAuthRevokeOtherSessionsResponses];

export type PostAuthLinkSocialData = {
  body: {
    callbackURL?: string;
    provider: string;
    idToken?: {
      [key: string]: unknown;
    };
    requestSignUp?: boolean;
    scopes?: Array<unknown>;
    errorCallbackURL?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/link-social";
};

export type PostAuthLinkSocialErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthLinkSocialError =
  PostAuthLinkSocialErrors[keyof PostAuthLinkSocialErrors];

export type PostAuthLinkSocialResponses = {
  /**
   * Success
   */
  200: {
    /**
     * The authorization URL to redirect the user to
     */
    url?: string;
    /**
     * Indicates if the user should be redirected to the authorization URL
     */
    redirect: boolean;
    status?: boolean;
  };
};

export type PostAuthLinkSocialResponse =
  PostAuthLinkSocialResponses[keyof PostAuthLinkSocialResponses];

export type GetAuthListAccountsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/list-accounts";
};

export type GetAuthListAccountsErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthListAccountsError =
  GetAuthListAccountsErrors[keyof GetAuthListAccountsErrors];

export type GetAuthListAccountsResponses = {
  /**
   * Success
   */
  200: Array<{
    id?: string;
    provider?: string;
    createdAt?: Date;
    updatedAt?: Date;
  }>;
};

export type GetAuthListAccountsResponse =
  GetAuthListAccountsResponses[keyof GetAuthListAccountsResponses];

export type GetAuthDeleteUserCallbackData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The token to verify the deletion request
     */
    token?: string;
    callbackURL?: string;
  };
  url: "/auth/delete-user/callback";
};

export type GetAuthDeleteUserCallbackErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthDeleteUserCallbackError =
  GetAuthDeleteUserCallbackErrors[keyof GetAuthDeleteUserCallbackErrors];

export type GetAuthDeleteUserCallbackResponses = {
  /**
   * User successfully deleted
   */
  200: {
    /**
     * Indicates if the deletion was successful
     */
    success: boolean;
    /**
     * Confirmation message
     */
    message: "User deleted";
  };
};

export type GetAuthDeleteUserCallbackResponse =
  GetAuthDeleteUserCallbackResponses[keyof GetAuthDeleteUserCallbackResponses];

export type PostAuthUnlinkAccountData = {
  body: {
    providerId: string;
    accountId?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/unlink-account";
};

export type PostAuthUnlinkAccountErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthUnlinkAccountError =
  PostAuthUnlinkAccountErrors[keyof PostAuthUnlinkAccountErrors];

export type PostAuthUnlinkAccountResponses = {
  /**
   * Success
   */
  200: {
    status?: boolean;
  };
};

export type PostAuthUnlinkAccountResponse =
  PostAuthUnlinkAccountResponses[keyof PostAuthUnlinkAccountResponses];

export type PostAuthRefreshTokenData = {
  body: {
    /**
     * The provider ID for the OAuth provider
     */
    providerId: string;
    accountId?: string;
    userId?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/refresh-token";
};

export type PostAuthRefreshTokenErrors = {
  /**
   * Invalid refresh token or provider configuration
   */
  400: unknown;
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRefreshTokenError =
  PostAuthRefreshTokenErrors[keyof PostAuthRefreshTokenErrors];

export type PostAuthRefreshTokenResponses = {
  /**
   * Access token refreshed successfully
   */
  200: {
    tokenType?: string;
    idToken?: string;
    accessToken?: string;
    refreshToken?: string;
    accessTokenExpiresAt?: Date;
    refreshTokenExpiresAt?: Date;
  };
};

export type PostAuthRefreshTokenResponse =
  PostAuthRefreshTokenResponses[keyof PostAuthRefreshTokenResponses];

export type PostAuthGetAccessTokenData = {
  body: {
    /**
     * The provider ID for the OAuth provider
     */
    providerId: string;
    accountId?: string;
    userId?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/get-access-token";
};

export type PostAuthGetAccessTokenErrors = {
  /**
   * Invalid refresh token or provider configuration
   */
  400: unknown;
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthGetAccessTokenError =
  PostAuthGetAccessTokenErrors[keyof PostAuthGetAccessTokenErrors];

export type PostAuthGetAccessTokenResponses = {
  /**
   * A Valid access token
   */
  200: {
    tokenType?: string;
    idToken?: string;
    accessToken?: string;
    refreshToken?: string;
    accessTokenExpiresAt?: Date;
    refreshTokenExpiresAt?: Date;
  };
};

export type PostAuthGetAccessTokenResponse =
  PostAuthGetAccessTokenResponses[keyof PostAuthGetAccessTokenResponses];

export type PostAuthAccountInfoData = {
  body: {
    /**
     * The provider given account id for which to get the account info
     */
    accountId: string;
  };
  path?: never;
  query?: never;
  url: "/auth/account-info";
};

export type PostAuthAccountInfoErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthAccountInfoError =
  PostAuthAccountInfoErrors[keyof PostAuthAccountInfoErrors];

export type PostAuthAccountInfoResponses = {
  /**
   * Success
   */
  200: {
    user: {
      id: string;
      name?: string;
      email?: string;
      image?: string;
      emailVerified: boolean;
    };
    data: {
      [key: string]: unknown;
    };
  };
};

export type PostAuthAccountInfoResponse =
  PostAuthAccountInfoResponses[keyof PostAuthAccountInfoResponses];

export type GetAuthOkData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/ok";
};

export type GetAuthOkErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthOkError = GetAuthOkErrors[keyof GetAuthOkErrors];

export type GetAuthOkResponses = {
  /**
   * API is working
   */
  200: {
    /**
     * Indicates if the API is working
     */
    ok: boolean;
  };
};

export type GetAuthOkResponse = GetAuthOkResponses[keyof GetAuthOkResponses];

export type GetAuthErrorData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/error";
};

export type GetAuthErrorErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthErrorError = GetAuthErrorErrors[keyof GetAuthErrorErrors];

export type GetAuthErrorResponses = {
  /**
   * The HTML content of the error page
   */
  200: string;
};

export type GetAuthErrorResponse =
  GetAuthErrorResponses[keyof GetAuthErrorResponses];

export type PostAuthSignInUsernameData = {
  body: {
    /**
     * The username of the user
     */
    username: string;
    /**
     * The password of the user
     */
    password: string;
    rememberMe?: boolean;
    callbackURL?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/sign-in/username";
};

export type PostAuthSignInUsernameErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthSignInUsernameError =
  PostAuthSignInUsernameErrors[keyof PostAuthSignInUsernameErrors];

export type PostAuthSignInUsernameResponses = {
  /**
   * Success
   */
  200: {
    /**
     * Session token for the authenticated session
     */
    token: string;
    user: User;
  };
};

export type PostAuthSignInUsernameResponse =
  PostAuthSignInUsernameResponses[keyof PostAuthSignInUsernameResponses];

export type PostAuthIsUsernameAvailableData = {
  body: {
    /**
     * The username to check
     */
    username: string;
  };
  path?: never;
  query?: never;
  url: "/auth/is-username-available";
};

export type PostAuthIsUsernameAvailableErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthIsUsernameAvailableError =
  PostAuthIsUsernameAvailableErrors[keyof PostAuthIsUsernameAvailableErrors];

export type PostAuthRbacRoleCreateData = {
  body: {
    name: string;
    enabled?: string;
    remark?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/role/create";
};

export type PostAuthRbacRoleCreateErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacRoleCreateError =
  PostAuthRbacRoleCreateErrors[keyof PostAuthRbacRoleCreateErrors];

export type PostAuthRbacRoleCreateResponses = {
  /**
   * Success
   */
  200: Role;
};

export type PostAuthRbacRoleCreateResponse =
  PostAuthRbacRoleCreateResponses[keyof PostAuthRbacRoleCreateResponses];

export type PostAuthRbacRoleUpdateData = {
  body: {
    name: string;
    enabled?: string;
    remark?: string;
    id: string;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/role/update";
};

export type PostAuthRbacRoleUpdateErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacRoleUpdateError =
  PostAuthRbacRoleUpdateErrors[keyof PostAuthRbacRoleUpdateErrors];

export type PostAuthRbacRoleUpdateResponses = {
  /**
   * Success
   */
  200: Role;
};

export type PostAuthRbacRoleUpdateResponse =
  PostAuthRbacRoleUpdateResponses[keyof PostAuthRbacRoleUpdateResponses];

export type PostAuthRbacRoleDeleteData = {
  body: {
    id: string;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/role/delete";
};

export type PostAuthRbacRoleDeleteErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacRoleDeleteError =
  PostAuthRbacRoleDeleteErrors[keyof PostAuthRbacRoleDeleteErrors];

export type PostAuthRbacRoleDeleteResponses = {
  /**
   * Success
   */
  200: {
    [key: string]: unknown;
  };
};

export type PostAuthRbacRoleDeleteResponse =
  PostAuthRbacRoleDeleteResponses[keyof PostAuthRbacRoleDeleteResponses];

export type PostAuthRbacRoleDeleteManyData = {
  body: {
    ids: Array<unknown>;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/role/delete-many";
};

export type PostAuthRbacRoleDeleteManyErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacRoleDeleteManyError =
  PostAuthRbacRoleDeleteManyErrors[keyof PostAuthRbacRoleDeleteManyErrors];

export type PostAuthRbacRoleDeleteManyResponses = {
  /**
   * Success
   */
  200: {
    [key: string]: unknown;
  };
};

export type PostAuthRbacRoleDeleteManyResponse =
  PostAuthRbacRoleDeleteManyResponses[keyof PostAuthRbacRoleDeleteManyResponses];

export type GetAuthRbacRoleGetData = {
  body?: never;
  path?: never;
  query?: {
    id?: string;
  };
  url: "/auth/rbac/role/get";
};

export type GetAuthRbacRoleGetErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthRbacRoleGetError =
  GetAuthRbacRoleGetErrors[keyof GetAuthRbacRoleGetErrors];

export type GetAuthRbacRoleGetResponses = {
  /**
   * Success
   */
  200: Role;
};

export type GetAuthRbacRoleGetResponse =
  GetAuthRbacRoleGetResponses[keyof GetAuthRbacRoleGetResponses];

export type PostAuthRbacRoleListData = {
  body?: {
    page?: number;
    pageSize?: number;
    sortBy?: {
      field: string;
      direction: "asc" | "desc";
    };
    name?: string | null;
    enabled?: boolean | null;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/role/list";
};

export type PostAuthRbacRoleListErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacRoleListError =
  PostAuthRbacRoleListErrors[keyof PostAuthRbacRoleListErrors];

export type PostAuthRbacRoleListResponses = {
  /**
   * Success
   */
  200: {
    records?: Array<Role>;
    total?: number;
  };
};

export type PostAuthRbacRoleListResponse =
  PostAuthRbacRoleListResponses[keyof PostAuthRbacRoleListResponses];

export type PostAuthRbacResourceCreateData = {
  body?: {
    name: string;
    enabled?: boolean | null;
    remark?: string | null;
    sort?: number | null;
    parentId?: string | null;
    type: "Menu" | "Page" | "Element";
    path?: string | null;
    activePath?: string | null;
    component?: string | null;
    icon?: string | null;
    isLink?: boolean | null;
    isCache?: boolean | null;
    isAffix?: boolean | null;
    isShow?: boolean | null;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/resource/create";
};

export type PostAuthRbacResourceCreateErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacResourceCreateError =
  PostAuthRbacResourceCreateErrors[keyof PostAuthRbacResourceCreateErrors];

export type PostAuthRbacResourceCreateResponses = {
  /**
   * Success
   */
  200: Resource;
};

export type PostAuthRbacResourceCreateResponse =
  PostAuthRbacResourceCreateResponses[keyof PostAuthRbacResourceCreateResponses];

export type PostAuthRbacResourceUpdateData = {
  body?: {
    name: string;
    enabled?: boolean | null;
    remark?: string | null;
    sort?: number | null;
    parentId?: string | null;
    type: "Menu" | "Page" | "Element";
    path?: string | null;
    activePath?: string | null;
    component?: string | null;
    icon?: string | null;
    isLink?: boolean | null;
    isCache?: boolean | null;
    isAffix?: boolean | null;
    isShow?: boolean | null;
    id: string;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/resource/update";
};

export type PostAuthRbacResourceUpdateErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacResourceUpdateError =
  PostAuthRbacResourceUpdateErrors[keyof PostAuthRbacResourceUpdateErrors];

export type PostAuthRbacResourceUpdateResponses = {
  /**
   * Success
   */
  200: Resource;
};

export type PostAuthRbacResourceUpdateResponse =
  PostAuthRbacResourceUpdateResponses[keyof PostAuthRbacResourceUpdateResponses];

export type PostAuthRbacResourceDeleteData = {
  body: {
    id: string;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/resource/delete";
};

export type PostAuthRbacResourceDeleteErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacResourceDeleteError =
  PostAuthRbacResourceDeleteErrors[keyof PostAuthRbacResourceDeleteErrors];

export type PostAuthRbacResourceDeleteResponses = {
  /**
   * Success
   */
  200: {
    [key: string]: unknown;
  };
};

export type PostAuthRbacResourceDeleteResponse =
  PostAuthRbacResourceDeleteResponses[keyof PostAuthRbacResourceDeleteResponses];

export type PostAuthRbacResourceDeleteManyData = {
  body: {
    ids: Array<unknown>;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/resource/delete-many";
};

export type PostAuthRbacResourceDeleteManyErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacResourceDeleteManyError =
  PostAuthRbacResourceDeleteManyErrors[keyof PostAuthRbacResourceDeleteManyErrors];

export type PostAuthRbacResourceDeleteManyResponses = {
  /**
   * Success
   */
  200: {
    [key: string]: unknown;
  };
};

export type PostAuthRbacResourceDeleteManyResponse =
  PostAuthRbacResourceDeleteManyResponses[keyof PostAuthRbacResourceDeleteManyResponses];

export type GetAuthRbacResourceGetData = {
  body?: never;
  path?: never;
  query?: {
    id?: string;
  };
  url: "/auth/rbac/resource/get";
};

export type GetAuthRbacResourceGetErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthRbacResourceGetError =
  GetAuthRbacResourceGetErrors[keyof GetAuthRbacResourceGetErrors];

export type GetAuthRbacResourceGetResponses = {
  /**
   * Success
   */
  200: {
    name: string;
    enabled?: boolean | null;
    remark?: string | null;
    sort?: number | null;
    parentId?: string | null;
    type: "Menu" | "Page" | "Element";
    path?: string | null;
    activePath?: string | null;
    component?: string | null;
    icon?: string | null;
    isLink?: boolean | null;
    isCache?: boolean | null;
    isAffix?: boolean | null;
    isShow?: boolean | null;
    id: string;
    locales: Array<{
      resourceId: string;
      field: string;
      enUs: string;
      zhCn: string;
    }>;
  };
};

export type GetAuthRbacResourceGetResponse =
  GetAuthRbacResourceGetResponses[keyof GetAuthRbacResourceGetResponses];

export type PostAuthRbacResourceListData = {
  body?: {
    page?: number;
    pageSize?: number;
    sortBy?: {
      field: string;
      direction: "asc" | "desc";
    };
    name?: string | null;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/resource/list";
};

export type PostAuthRbacResourceListErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacResourceListError =
  PostAuthRbacResourceListErrors[keyof PostAuthRbacResourceListErrors];

export type PostAuthRbacResourceListResponses = {
  /**
   * Success
   */
  200: {
    records: Array<{
      name: string;
      enabled?: boolean | null;
      remark?: string | null;
      sort?: number | null;
      parentId?: string | null;
      type: "Menu" | "Page" | "Element";
      path?: string | null;
      activePath?: string | null;
      component?: string | null;
      icon?: string | null;
      isLink?: boolean | null;
      isCache?: boolean | null;
      isAffix?: boolean | null;
      isShow?: boolean | null;
      id: string;
      locales: Array<{
        resourceId: string;
        field: string;
        enUs: string;
        zhCn: string;
      }>;
    }>;
    total: number;
  };
};

export type PostAuthRbacResourceListResponse =
  PostAuthRbacResourceListResponses[keyof PostAuthRbacResourceListResponses];

export type PostAuthRbacResourceLocaleCreateData = {
  body?: {
    resourceId: string;
    field: string;
    enUs: string;
    zhCn: string;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/resource-locale/create";
};

export type PostAuthRbacResourceLocaleCreateErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacResourceLocaleCreateError =
  PostAuthRbacResourceLocaleCreateErrors[keyof PostAuthRbacResourceLocaleCreateErrors];

export type PostAuthRbacResourceLocaleCreateResponses = {
  /**
   * Success
   */
  200: ResourceLocale;
};

export type PostAuthRbacResourceLocaleCreateResponse =
  PostAuthRbacResourceLocaleCreateResponses[keyof PostAuthRbacResourceLocaleCreateResponses];

export type PostAuthRbacResourceLocaleUpdateData = {
  body?: {
    resourceId: string;
    field: string;
    enUs: string;
    zhCn: string;
    id: string;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/resource-locale/update";
};

export type PostAuthRbacResourceLocaleUpdateErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacResourceLocaleUpdateError =
  PostAuthRbacResourceLocaleUpdateErrors[keyof PostAuthRbacResourceLocaleUpdateErrors];

export type PostAuthRbacResourceLocaleUpdateResponses = {
  /**
   * Success
   */
  200: ResourceLocale;
};

export type PostAuthRbacResourceLocaleUpdateResponse =
  PostAuthRbacResourceLocaleUpdateResponses[keyof PostAuthRbacResourceLocaleUpdateResponses];

export type PostAuthRbacResourceLocaleDeleteData = {
  body: {
    id: string;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/resource-locale/delete";
};

export type PostAuthRbacResourceLocaleDeleteErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacResourceLocaleDeleteError =
  PostAuthRbacResourceLocaleDeleteErrors[keyof PostAuthRbacResourceLocaleDeleteErrors];

export type PostAuthRbacResourceLocaleDeleteResponses = {
  /**
   * Success
   */
  200: {
    [key: string]: unknown;
  };
};

export type PostAuthRbacResourceLocaleDeleteResponse =
  PostAuthRbacResourceLocaleDeleteResponses[keyof PostAuthRbacResourceLocaleDeleteResponses];

export type PostAuthRbacResourceLocaleDeleteManyData = {
  body: {
    ids: Array<unknown>;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/resource-locale/delete-many";
};

export type PostAuthRbacResourceLocaleDeleteManyErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacResourceLocaleDeleteManyError =
  PostAuthRbacResourceLocaleDeleteManyErrors[keyof PostAuthRbacResourceLocaleDeleteManyErrors];

export type PostAuthRbacResourceLocaleDeleteManyResponses = {
  /**
   * Success
   */
  200: {
    [key: string]: unknown;
  };
};

export type PostAuthRbacResourceLocaleDeleteManyResponse =
  PostAuthRbacResourceLocaleDeleteManyResponses[keyof PostAuthRbacResourceLocaleDeleteManyResponses];

export type GetAuthRbacResourceLocaleGetData = {
  body?: never;
  path?: never;
  query?: {
    id?: string;
  };
  url: "/auth/rbac/resource-locale/get";
};

export type GetAuthRbacResourceLocaleGetErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type GetAuthRbacResourceLocaleGetError =
  GetAuthRbacResourceLocaleGetErrors[keyof GetAuthRbacResourceLocaleGetErrors];

export type GetAuthRbacResourceLocaleGetResponses = {
  /**
   * Success
   */
  200: ResourceLocale;
};

export type GetAuthRbacResourceLocaleGetResponse =
  GetAuthRbacResourceLocaleGetResponses[keyof GetAuthRbacResourceLocaleGetResponses];

export type PostAuthRbacResourceLocaleListData = {
  body?: {
    page?: number;
    pageSize?: number;
    sortBy?: {
      field: string;
      direction: "asc" | "desc";
    };
    field?: string | null;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/resource-locale/list";
};

export type PostAuthRbacResourceLocaleListErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacResourceLocaleListError =
  PostAuthRbacResourceLocaleListErrors[keyof PostAuthRbacResourceLocaleListErrors];

export type PostAuthRbacResourceLocaleListResponses = {
  /**
   * Success
   */
  200: {
    records?: Array<ResourceLocale>;
    total?: number;
  };
};

export type PostAuthRbacResourceLocaleListResponse =
  PostAuthRbacResourceLocaleListResponses[keyof PostAuthRbacResourceLocaleListResponses];

export type PostAuthRbacUserRoleRelationCreateData = {
  body: {
    userId: string;
    roleId: string;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/user-role-relation/create";
};

export type PostAuthRbacUserRoleRelationCreateErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacUserRoleRelationCreateError =
  PostAuthRbacUserRoleRelationCreateErrors[keyof PostAuthRbacUserRoleRelationCreateErrors];

export type PostAuthRbacUserRoleRelationCreateResponses = {
  /**
   * Success
   */
  200: UserRoleRelation;
};

export type PostAuthRbacUserRoleRelationCreateResponse =
  PostAuthRbacUserRoleRelationCreateResponses[keyof PostAuthRbacUserRoleRelationCreateResponses];

export type PostAuthRbacUserRoleRelationDeleteData = {
  body: {
    userId: string;
    roleId: string;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/user-role-relation/delete";
};

export type PostAuthRbacUserRoleRelationDeleteErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacUserRoleRelationDeleteError =
  PostAuthRbacUserRoleRelationDeleteErrors[keyof PostAuthRbacUserRoleRelationDeleteErrors];

export type PostAuthRbacUserRoleRelationDeleteResponses = {
  /**
   * Success
   */
  200: {
    [key: string]: unknown;
  };
};

export type PostAuthRbacUserRoleRelationDeleteResponse =
  PostAuthRbacUserRoleRelationDeleteResponses[keyof PostAuthRbacUserRoleRelationDeleteResponses];

export type PostAuthRbacUserRoleRelationListData = {
  body?: {
    page?: number;
    pageSize?: number;
    userId?: string;
    roleId?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/user-role-relation/list";
};

export type PostAuthRbacUserRoleRelationListErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacUserRoleRelationListError =
  PostAuthRbacUserRoleRelationListErrors[keyof PostAuthRbacUserRoleRelationListErrors];

export type PostAuthRbacUserRoleRelationListResponses = {
  /**
   * Success
   */
  200: {
    records?: Array<UserRoleRelation>;
    total?: number;
  };
};

export type PostAuthRbacUserRoleRelationListResponse =
  PostAuthRbacUserRoleRelationListResponses[keyof PostAuthRbacUserRoleRelationListResponses];

export type PostAuthRbacRoleResourceRelationCreateData = {
  body: {
    roleId: string;
    resourceId: string;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/role-resource-relation/create";
};

export type PostAuthRbacRoleResourceRelationCreateErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacRoleResourceRelationCreateError =
  PostAuthRbacRoleResourceRelationCreateErrors[keyof PostAuthRbacRoleResourceRelationCreateErrors];

export type PostAuthRbacRoleResourceRelationCreateResponses = {
  /**
   * Success
   */
  200: UserRoleRelation;
};

export type PostAuthRbacRoleResourceRelationCreateResponse =
  PostAuthRbacRoleResourceRelationCreateResponses[keyof PostAuthRbacRoleResourceRelationCreateResponses];

export type PostAuthRbacRoleResourceRelationDeleteData = {
  body: {
    roleId: string;
    resourceId: string;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/role-resource-relation/delete";
};

export type PostAuthRbacRoleResourceRelationDeleteErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacRoleResourceRelationDeleteError =
  PostAuthRbacRoleResourceRelationDeleteErrors[keyof PostAuthRbacRoleResourceRelationDeleteErrors];

export type PostAuthRbacRoleResourceRelationDeleteResponses = {
  /**
   * Success
   */
  200: {
    [key: string]: unknown;
  };
};

export type PostAuthRbacRoleResourceRelationDeleteResponse =
  PostAuthRbacRoleResourceRelationDeleteResponses[keyof PostAuthRbacRoleResourceRelationDeleteResponses];

export type PostAuthRbacRoleResourceRelationBatchSetData = {
  body: {
    roleId: string;
    resourceIds: Array<unknown>;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/role-resource-relation/batch-set";
};

export type PostAuthRbacRoleResourceRelationBatchSetErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacRoleResourceRelationBatchSetError =
  PostAuthRbacRoleResourceRelationBatchSetErrors[keyof PostAuthRbacRoleResourceRelationBatchSetErrors];

export type PostAuthRbacRoleResourceRelationBatchSetResponses = {
  /**
   * Success
   */
  200: {
    [key: string]: unknown;
  };
};

export type PostAuthRbacRoleResourceRelationBatchSetResponse =
  PostAuthRbacRoleResourceRelationBatchSetResponses[keyof PostAuthRbacRoleResourceRelationBatchSetResponses];

export type PostAuthRbacRoleResourceRelationListData = {
  body?: {
    page?: number;
    pageSize?: number;
    roleId?: string;
    resourceId?: string;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/role-resource-relation/list";
};

export type PostAuthRbacRoleResourceRelationListErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacRoleResourceRelationListError =
  PostAuthRbacRoleResourceRelationListErrors[keyof PostAuthRbacRoleResourceRelationListErrors];

export type PostAuthRbacRoleResourceRelationListResponses = {
  /**
   * Success
   */
  200: {
    records?: Array<RoleResourceRelation>;
    total?: number;
  };
};

export type PostAuthRbacRoleResourceRelationListResponse =
  PostAuthRbacRoleResourceRelationListResponses[keyof PostAuthRbacRoleResourceRelationListResponses];

export type PostAuthRbacListUserRolesData = {
  body?: {
    userId: string;
    roleName?: string | null;
    sortBy?: {
      field: string;
      direction: "asc" | "desc";
    };
    page?: number;
    pageSize?: number;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/list-user-roles";
};

export type PostAuthRbacListUserRolesErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacListUserRolesError =
  PostAuthRbacListUserRolesErrors[keyof PostAuthRbacListUserRolesErrors];

export type PostAuthRbacListUserRolesResponses = {
  /**
   * Success
   */
  200: {
    records?: Array<Role>;
    total?: number;
  };
};

export type PostAuthRbacListUserRolesResponse =
  PostAuthRbacListUserRolesResponses[keyof PostAuthRbacListUserRolesResponses];

export type PostAuthRbacListUserResourcesData = {
  body?: {
    userId: string;
    resourceName?: string | null;
    resourceType?: "Menu" | "Page" | "Element";
    sortBy?: {
      field: string;
      direction: "asc" | "desc";
    };
    page?: number;
    pageSize?: number;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/list-user-resources";
};

export type PostAuthRbacListUserResourcesErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacListUserResourcesError =
  PostAuthRbacListUserResourcesErrors[keyof PostAuthRbacListUserResourcesErrors];

export type PostAuthRbacListUserResourcesResponses = {
  /**
   * Success
   */
  200: {
    records: Array<{
      name: string;
      enabled?: boolean | null;
      remark?: string | null;
      sort?: number | null;
      parentId?: string | null;
      type: "Menu" | "Page" | "Element";
      path?: string | null;
      activePath?: string | null;
      component?: string | null;
      icon?: string | null;
      isLink?: boolean | null;
      isCache?: boolean | null;
      isAffix?: boolean | null;
      isShow?: boolean | null;
      id: string;
      locales: Array<{
        resourceId: string;
        field: string;
        enUs: string;
        zhCn: string;
      }>;
    }>;
    total: number;
  };
};

export type PostAuthRbacListUserResourcesResponse =
  PostAuthRbacListUserResourcesResponses[keyof PostAuthRbacListUserResourcesResponses];

export type PostAuthRbacListUserResourceTreeData = {
  body: {
    userId: string;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/list-user-resource-tree";
};

export type PostAuthRbacListUserResourceTreeErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacListUserResourceTreeError =
  PostAuthRbacListUserResourceTreeErrors[keyof PostAuthRbacListUserResourceTreeErrors];

export type PostAuthRbacListUserResourceTreeResponses = {
  /**
   * Success
   */
  200: Array<ResourceNode>;
};

export type PostAuthRbacListUserResourceTreeResponse =
  PostAuthRbacListUserResourceTreeResponses[keyof PostAuthRbacListUserResourceTreeResponses];

export type PostAuthRbacListUserRolesWithGrantData = {
  body?: {
    page?: number;
    pageSize?: number;
    sortBy?: {
      field: string;
      direction: "asc" | "desc";
    };
    name?: string | null;
    enabled?: boolean | null;
    userId: string;
    grant?: boolean | null;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/list-user-roles-with-grant";
};

export type PostAuthRbacListUserRolesWithGrantErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacListUserRolesWithGrantError =
  PostAuthRbacListUserRolesWithGrantErrors[keyof PostAuthRbacListUserRolesWithGrantErrors];

export type PostAuthRbacListUserRolesWithGrantResponses = {
  /**
   * Success
   */
  200: {
    records: Array<{
      name: string;
      enabled?: boolean | null;
      remark?: string | null;
      id: string;
      grant?: boolean | null;
    }>;
    total: number;
  };
};

export type PostAuthRbacListUserRolesWithGrantResponse =
  PostAuthRbacListUserRolesWithGrantResponses[keyof PostAuthRbacListUserRolesWithGrantResponses];

export type PostAuthRbacListRoleUsersData = {
  body?: {
    roleId: string;
    username?: string | null;
    sortBy?: {
      field: string;
      direction: "asc" | "desc";
    };
    page?: number;
    pageSize?: number;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/list-role-users";
};

export type PostAuthRbacListRoleUsersErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacListRoleUsersError =
  PostAuthRbacListRoleUsersErrors[keyof PostAuthRbacListRoleUsersErrors];

export type PostAuthRbacListRoleUsersResponses = {
  /**
   * Success
   */
  200: {
    records?: Array<User>;
    total?: number;
  };
};

export type PostAuthRbacListRoleUsersResponse =
  PostAuthRbacListRoleUsersResponses[keyof PostAuthRbacListRoleUsersResponses];

export type PostAuthRbacListRoleResourcesData = {
  body?: {
    roleId: string;
    resourceName?: string | null;
    sortBy?: {
      field: string;
      direction: "asc" | "desc";
    };
    page?: number;
    pageSize?: number;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/list-role-resources";
};

export type PostAuthRbacListRoleResourcesErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacListRoleResourcesError =
  PostAuthRbacListRoleResourcesErrors[keyof PostAuthRbacListRoleResourcesErrors];

export type PostAuthRbacListRoleResourcesResponses = {
  /**
   * Success
   */
  200: {
    records: Array<{
      name: string;
      enabled?: boolean | null;
      remark?: string | null;
      sort?: number | null;
      parentId?: string | null;
      type: "Menu" | "Page" | "Element";
      path?: string | null;
      activePath?: string | null;
      component?: string | null;
      icon?: string | null;
      isLink?: boolean | null;
      isCache?: boolean | null;
      isAffix?: boolean | null;
      isShow?: boolean | null;
      id: string;
      locales: Array<{
        resourceId: string;
        field: string;
        enUs: string;
        zhCn: string;
      }>;
    }>;
    total: number;
  };
};

export type PostAuthRbacListRoleResourcesResponse =
  PostAuthRbacListRoleResourcesResponses[keyof PostAuthRbacListRoleResourcesResponses];

export type PostAuthRbacListRoleResourceTreeData = {
  body?: {
    roleId: string;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/list-role-resource-tree";
};

export type PostAuthRbacListRoleResourceTreeErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacListRoleResourceTreeError =
  PostAuthRbacListRoleResourceTreeErrors[keyof PostAuthRbacListRoleResourceTreeErrors];

export type PostAuthRbacListRoleResourceTreeResponses = {
  /**
   * Success
   */
  200: Array<ResourceNode>;
};

export type PostAuthRbacListRoleResourceTreeResponse =
  PostAuthRbacListRoleResourceTreeResponses[keyof PostAuthRbacListRoleResourceTreeResponses];

export type PostAuthRbacListResourceRolesData = {
  body?: {
    resourceId: string;
    roleName?: string | null;
    sortBy?: {
      field: string;
      direction: "asc" | "desc";
    };
    page?: number;
    pageSize?: number;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/list-resource-roles";
};

export type PostAuthRbacListResourceRolesErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacListResourceRolesError =
  PostAuthRbacListResourceRolesErrors[keyof PostAuthRbacListResourceRolesErrors];

export type PostAuthRbacListResourceRolesResponses = {
  /**
   * Success
   */
  200: {
    records?: Array<Role>;
    total?: number;
  };
};

export type PostAuthRbacListResourceRolesResponse =
  PostAuthRbacListResourceRolesResponses[keyof PostAuthRbacListResourceRolesResponses];

export type PostAuthRbacListResourceUsersData = {
  body?: {
    resourceId: string;
    username?: string | null;
    sortBy?: {
      field: string;
      direction: "asc" | "desc";
    };
    page?: number;
    pageSize?: number;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/list-resource-users";
};

export type PostAuthRbacListResourceUsersErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacListResourceUsersError =
  PostAuthRbacListResourceUsersErrors[keyof PostAuthRbacListResourceUsersErrors];

export type PostAuthRbacListResourceUsersResponses = {
  /**
   * Success
   */
  200: {
    records?: Array<User>;
    total?: number;
  };
};

export type PostAuthRbacListResourceUsersResponse =
  PostAuthRbacListResourceUsersResponses[keyof PostAuthRbacListResourceUsersResponses];

export type PostAuthRbacListResourceTreeData = {
  body?: {
    enabled?: boolean | null;
  } | null;
  path?: never;
  query?: never;
  url: "/auth/rbac/list-resource-tree";
};

export type PostAuthRbacListResourceTreeErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacListResourceTreeError =
  PostAuthRbacListResourceTreeErrors[keyof PostAuthRbacListResourceTreeErrors];

export type PostAuthRbacListResourceTreeResponses = {
  /**
   * Success
   */
  200: Array<ResourceNode>;
};

export type PostAuthRbacListResourceTreeResponse =
  PostAuthRbacListResourceTreeResponses[keyof PostAuthRbacListResourceTreeResponses];

export type PostAuthRbacUserCreateData = {
  body: {
    name: string;
    username: string;
    displayUsername?: string;
    email: string;
    password: string;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/user/create";
};

export type PostAuthRbacUserCreateErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacUserCreateError =
  PostAuthRbacUserCreateErrors[keyof PostAuthRbacUserCreateErrors];

export type PostAuthRbacUserCreateResponses = {
  /**
   * Success
   */
  200: User;
};

export type PostAuthRbacUserCreateResponse =
  PostAuthRbacUserCreateResponses[keyof PostAuthRbacUserCreateResponses];

export type PostAuthRbacUserDeleteData = {
  body: {
    id: string;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/user/delete";
};

export type PostAuthRbacUserDeleteErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacUserDeleteError =
  PostAuthRbacUserDeleteErrors[keyof PostAuthRbacUserDeleteErrors];

export type PostAuthRbacUserDeleteResponses = {
  /**
   * Success
   */
  200: {
    [key: string]: unknown;
  };
};

export type PostAuthRbacUserDeleteResponse =
  PostAuthRbacUserDeleteResponses[keyof PostAuthRbacUserDeleteResponses];

export type PostAuthRbacUserListData = {
  body?: {
    page?: number;
    pageSize?: number;
    sortBy?: {
      field: string;
      direction: "asc" | "desc";
    };
    username?: string | null;
    displayUsername?: string | null;
    email?: string | null;
  };
  path?: never;
  query?: never;
  url: "/auth/rbac/user/list";
};

export type PostAuthRbacUserListErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacUserListError =
  PostAuthRbacUserListErrors[keyof PostAuthRbacUserListErrors];

export type PostAuthRbacUserListResponses = {
  /**
   * Success
   */
  200: {
    records?: Array<User>;
    total?: number;
  };
};

export type PostAuthRbacUserListResponse =
  PostAuthRbacUserListResponses[keyof PostAuthRbacUserListResponses];

export type PostAuthRbacGetUserResourceTreeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/rbac/get-user-resource-tree";
};

export type PostAuthRbacGetUserResourceTreeErrors = {
  /**
   * Bad Request. Usually due to missing parameters, or invalid parameters.
   */
  400: {
    message: string;
  };
  /**
   * Unauthorized. Due to missing or invalid authentication.
   */
  401: {
    message: string;
  };
  /**
   * Forbidden. You do not have permission to access this resource or to perform this action.
   */
  403: {
    message?: string;
  };
  /**
   * Not Found. The requested resource was not found.
   */
  404: {
    message?: string;
  };
  /**
   * Too Many Requests. You have exceeded the rate limit. Try again later.
   */
  429: {
    message?: string;
  };
  /**
   * Internal Server Error. This is a problem with the server that you cannot fix.
   */
  500: {
    message?: string;
  };
};

export type PostAuthRbacGetUserResourceTreeError =
  PostAuthRbacGetUserResourceTreeErrors[keyof PostAuthRbacGetUserResourceTreeErrors];

export type PostAuthRbacGetUserResourceTreeResponses = {
  /**
   * Success
   */
  200: Array<ResourceNode>;
};

export type PostAuthRbacGetUserResourceTreeResponse =
  PostAuthRbacGetUserResourceTreeResponses[keyof PostAuthRbacGetUserResourceTreeResponses];
