// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  GetArticleData,
  GetArticleResponses,
  SocialSignInData,
  SocialSignInResponses,
  SocialSignInErrors,
  GetAuthGetSessionData,
  GetAuthGetSessionResponses,
  GetAuthGetSessionErrors,
  PostAuthSignOutData,
  PostAuthSignOutResponses,
  PostAuthSignOutErrors,
  PostAuthSignUpEmailData,
  PostAuthSignUpEmailResponses,
  PostAuthSignUpEmailErrors,
  PostAuthSignInEmailData,
  PostAuthSignInEmailResponses,
  PostAuthSignInEmailErrors,
  PostAuthForgetPasswordData,
  PostAuthForgetPasswordResponses,
  PostAuthForgetPasswordErrors,
  PostAuthResetPasswordData,
  PostAuthResetPasswordResponses,
  PostAuthResetPasswordErrors,
  GetAuthVerifyEmailData,
  GetAuthVerifyEmailResponses,
  GetAuthVerifyEmailErrors,
  PostAuthSendVerificationEmailData,
  PostAuthSendVerificationEmailResponses,
  PostAuthSendVerificationEmailErrors,
  PostAuthChangeEmailData,
  PostAuthChangeEmailResponses,
  PostAuthChangeEmailErrors,
  PostAuthChangePasswordData,
  PostAuthChangePasswordResponses,
  PostAuthChangePasswordErrors,
  PostAuthUpdateUserData,
  PostAuthUpdateUserResponses,
  PostAuthUpdateUserErrors,
  PostAuthDeleteUserData,
  PostAuthDeleteUserResponses,
  PostAuthDeleteUserErrors,
  GetAuthResetPasswordByTokenData,
  GetAuthResetPasswordByTokenResponses,
  GetAuthResetPasswordByTokenErrors,
  PostAuthRequestPasswordResetData,
  PostAuthRequestPasswordResetResponses,
  PostAuthRequestPasswordResetErrors,
  GetAuthListSessionsData,
  GetAuthListSessionsResponses,
  GetAuthListSessionsErrors,
  PostAuthRevokeSessionData,
  PostAuthRevokeSessionResponses,
  PostAuthRevokeSessionErrors,
  PostAuthRevokeSessionsData,
  PostAuthRevokeSessionsResponses,
  PostAuthRevokeSessionsErrors,
  PostAuthRevokeOtherSessionsData,
  PostAuthRevokeOtherSessionsResponses,
  PostAuthRevokeOtherSessionsErrors,
  PostAuthLinkSocialData,
  PostAuthLinkSocialResponses,
  PostAuthLinkSocialErrors,
  GetAuthListAccountsData,
  GetAuthListAccountsResponses,
  GetAuthListAccountsErrors,
  GetAuthDeleteUserCallbackData,
  GetAuthDeleteUserCallbackResponses,
  GetAuthDeleteUserCallbackErrors,
  PostAuthUnlinkAccountData,
  PostAuthUnlinkAccountResponses,
  PostAuthUnlinkAccountErrors,
  PostAuthRefreshTokenData,
  PostAuthRefreshTokenResponses,
  PostAuthRefreshTokenErrors,
  PostAuthGetAccessTokenData,
  PostAuthGetAccessTokenResponses,
  PostAuthGetAccessTokenErrors,
  PostAuthAccountInfoData,
  PostAuthAccountInfoResponses,
  PostAuthAccountInfoErrors,
  GetAuthOkData,
  GetAuthOkResponses,
  GetAuthOkErrors,
  GetAuthErrorData,
  GetAuthErrorResponses,
  GetAuthErrorErrors,
  PostAuthSignInUsernameData,
  PostAuthSignInUsernameResponses,
  PostAuthSignInUsernameErrors,
  PostAuthIsUsernameAvailableData,
  PostAuthIsUsernameAvailableErrors,
  PostAuthRoleCreateData,
  PostAuthRoleCreateResponses,
  PostAuthRoleCreateErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";
import {
  postAuthSignUpEmailResponseTransformer,
  postAuthSignInEmailResponseTransformer,
  postAuthChangePasswordResponseTransformer,
  getAuthListAccountsResponseTransformer,
  postAuthRefreshTokenResponseTransformer,
  postAuthGetAccessTokenResponseTransformer,
} from "./transformers.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const getArticle = <ThrowOnError extends boolean = false>(
  options: Options<GetArticleData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetArticleResponses,
    unknown,
    ThrowOnError
  >({
    url: "/article",
    ...options,
  });
};

/**
 * Sign in with a social provider
 */
export const socialSignIn = <ThrowOnError extends boolean = false>(
  options: Options<SocialSignInData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SocialSignInResponses,
    SocialSignInErrors,
    ThrowOnError
  >({
    url: "/auth/sign-in/social",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get the current session
 */
export const getAuthGetSession = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthGetSessionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthGetSessionResponses,
    GetAuthGetSessionErrors,
    ThrowOnError
  >({
    url: "/auth/get-session",
    ...options,
  });
};

/**
 * Sign out the current user
 */
export const postAuthSignOut = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthSignOutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthSignOutResponses,
    PostAuthSignOutErrors,
    ThrowOnError
  >({
    url: "/auth/sign-out",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Sign up a user using email and password
 */
export const postAuthSignUpEmail = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthSignUpEmailData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthSignUpEmailResponses,
    PostAuthSignUpEmailErrors,
    ThrowOnError
  >({
    responseTransformer: postAuthSignUpEmailResponseTransformer,
    url: "/auth/sign-up/email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Sign in with email and password
 */
export const postAuthSignInEmail = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthSignInEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthSignInEmailResponses,
    PostAuthSignInEmailErrors,
    ThrowOnError
  >({
    responseTransformer: postAuthSignInEmailResponseTransformer,
    url: "/auth/sign-in/email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Send a password reset email to the user
 */
export const postAuthForgetPassword = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthForgetPasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthForgetPasswordResponses,
    PostAuthForgetPasswordErrors,
    ThrowOnError
  >({
    url: "/auth/forget-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Reset the password for a user
 */
export const postAuthResetPassword = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthResetPasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthResetPasswordResponses,
    PostAuthResetPasswordErrors,
    ThrowOnError
  >({
    url: "/auth/reset-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Verify the email of the user
 */
export const getAuthVerifyEmail = <ThrowOnError extends boolean = false>(
  options: Options<GetAuthVerifyEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetAuthVerifyEmailResponses,
    GetAuthVerifyEmailErrors,
    ThrowOnError
  >({
    url: "/auth/verify-email",
    ...options,
  });
};

/**
 * Send a verification email to the user
 */
export const postAuthSendVerificationEmail = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthSendVerificationEmailData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthSendVerificationEmailResponses,
    PostAuthSendVerificationEmailErrors,
    ThrowOnError
  >({
    url: "/auth/send-verification-email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postAuthChangeEmail = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthChangeEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthChangeEmailResponses,
    PostAuthChangeEmailErrors,
    ThrowOnError
  >({
    url: "/auth/change-email",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Change the password of the user
 */
export const postAuthChangePassword = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthChangePasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthChangePasswordResponses,
    PostAuthChangePasswordErrors,
    ThrowOnError
  >({
    responseTransformer: postAuthChangePasswordResponseTransformer,
    url: "/auth/change-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Update the current user
 */
export const postAuthUpdateUser = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthUpdateUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthUpdateUserResponses,
    PostAuthUpdateUserErrors,
    ThrowOnError
  >({
    url: "/auth/update-user",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete the user
 */
export const postAuthDeleteUser = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthDeleteUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthDeleteUserResponses,
    PostAuthDeleteUserErrors,
    ThrowOnError
  >({
    url: "/auth/delete-user",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Redirects the user to the callback URL with the token
 */
export const getAuthResetPasswordByToken = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetAuthResetPasswordByTokenData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthResetPasswordByTokenResponses,
    GetAuthResetPasswordByTokenErrors,
    ThrowOnError
  >({
    url: "/auth/reset-password/{token}",
    ...options,
  });
};

/**
 * Send a password reset email to the user
 */
export const postAuthRequestPasswordReset = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostAuthRequestPasswordResetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthRequestPasswordResetResponses,
    PostAuthRequestPasswordResetErrors,
    ThrowOnError
  >({
    url: "/auth/request-password-reset",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all active sessions for the user
 */
export const getAuthListSessions = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthListSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthListSessionsResponses,
    GetAuthListSessionsErrors,
    ThrowOnError
  >({
    url: "/auth/list-sessions",
    ...options,
  });
};

/**
 * Revoke a single session
 */
export const postAuthRevokeSession = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthRevokeSessionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthRevokeSessionResponses,
    PostAuthRevokeSessionErrors,
    ThrowOnError
  >({
    url: "/auth/revoke-session",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Revoke all sessions for the user
 */
export const postAuthRevokeSessions = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthRevokeSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthRevokeSessionsResponses,
    PostAuthRevokeSessionsErrors,
    ThrowOnError
  >({
    url: "/auth/revoke-sessions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Revoke all other sessions for the user except the current one
 */
export const postAuthRevokeOtherSessions = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PostAuthRevokeOtherSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthRevokeOtherSessionsResponses,
    PostAuthRevokeOtherSessionsErrors,
    ThrowOnError
  >({
    url: "/auth/revoke-other-sessions",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Link a social account to the user
 */
export const postAuthLinkSocial = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthLinkSocialData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthLinkSocialResponses,
    PostAuthLinkSocialErrors,
    ThrowOnError
  >({
    url: "/auth/link-social",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all accounts linked to the user
 */
export const getAuthListAccounts = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthListAccountsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthListAccountsResponses,
    GetAuthListAccountsErrors,
    ThrowOnError
  >({
    responseTransformer: getAuthListAccountsResponseTransformer,
    url: "/auth/list-accounts",
    ...options,
  });
};

/**
 * Callback to complete user deletion with verification token
 */
export const getAuthDeleteUserCallback = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthDeleteUserCallbackData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthDeleteUserCallbackResponses,
    GetAuthDeleteUserCallbackErrors,
    ThrowOnError
  >({
    url: "/auth/delete-user/callback",
    ...options,
  });
};

/**
 * Unlink an account
 */
export const postAuthUnlinkAccount = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthUnlinkAccountData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthUnlinkAccountResponses,
    PostAuthUnlinkAccountErrors,
    ThrowOnError
  >({
    url: "/auth/unlink-account",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Refresh the access token using a refresh token
 */
export const postAuthRefreshToken = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthRefreshTokenData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthRefreshTokenResponses,
    PostAuthRefreshTokenErrors,
    ThrowOnError
  >({
    responseTransformer: postAuthRefreshTokenResponseTransformer,
    url: "/auth/refresh-token",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get a valid access token, doing a refresh if needed
 */
export const postAuthGetAccessToken = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthGetAccessTokenData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthGetAccessTokenResponses,
    PostAuthGetAccessTokenErrors,
    ThrowOnError
  >({
    responseTransformer: postAuthGetAccessTokenResponseTransformer,
    url: "/auth/get-access-token",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get the account info provided by the provider
 */
export const postAuthAccountInfo = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthAccountInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthAccountInfoResponses,
    PostAuthAccountInfoErrors,
    ThrowOnError
  >({
    url: "/auth/account-info",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Check if the API is working
 */
export const getAuthOk = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthOkData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthOkResponses,
    GetAuthOkErrors,
    ThrowOnError
  >({
    url: "/auth/ok",
    ...options,
  });
};

/**
 * Displays an error page
 */
export const getAuthError = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthErrorData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthErrorResponses,
    GetAuthErrorErrors,
    ThrowOnError
  >({
    url: "/auth/error",
    ...options,
  });
};

/**
 * Sign in with username
 */
export const postAuthSignInUsername = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthSignInUsernameData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthSignInUsernameResponses,
    PostAuthSignInUsernameErrors,
    ThrowOnError
  >({
    url: "/auth/sign-in/username",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postAuthIsUsernameAvailable = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostAuthIsUsernameAvailableData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    PostAuthIsUsernameAvailableErrors,
    ThrowOnError
  >({
    url: "/auth/is-username-available",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create a role
 */
export const postAuthRoleCreate = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthRoleCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthRoleCreateResponses,
    PostAuthRoleCreateErrors,
    ThrowOnError
  >({
    url: "/auth/role/create",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};
